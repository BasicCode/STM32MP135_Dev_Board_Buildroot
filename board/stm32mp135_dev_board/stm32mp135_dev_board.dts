// SPDX-License-Identifier: (GPL-2.0-or-later OR BSD-3-Clause)
/*
 * Copyright (C) 2023, STMicroelectronics - All Rights Reserved
 * Author: STM32CubeMX code generation for STMicroelectronics.
 */

/* For more information on Device Tree configuration, please refer to
 * https://wiki.st.com/stm32mpu/wiki/Category:Device_tree_configuration
 */

/dts-v1/;
#include <dt-bindings/pinctrl/stm32-pinfunc.h>

#include "stm32mp135.dtsi"
#include "stm32mp13xf.dtsi"
#include "stm32mp13-pinctrl.dtsi"

/* USER CODE BEGIN includes */
#include <dt-bindings/gpio/gpio.h>
#include <dt-bindings/input/input.h>
#include <dt-bindings/leds/common.h>
#include <dt-bindings/regulator/st,stm32mp13-regulator.h>
#include <dt-bindings/rtc/rtc-stm32.h>
#include <dt-bindings/interrupt-controller/irq.h>
/* USER CODE END includes */

/ {
	model = "BasicCode STM32MP135 Dev Board Linux";
	compatible = "st,stm32mp135";

	memory@c0000000 {
		device_type = "memory";
		reg = <0xc0000000 0x10000000>;
	};

	reserved-memory {
		#address-cells = <1>;
		#size-cells = <1>;
		ranges;

		optee_framebuffer@cd000000 {
				reg = <0xcd000000 0x1000000>;
				no-map;
		};

		optee@ce000000 {
				reg = <0xce000000 0x2000000>;
				no-map;
		};
	};

	/* USER CODE BEGIN root */

	aliases{
		serial0 = &uart4;
		serial1 = &usart1;
		serial2 = &uart8;
		serial3 = &usart2;
	};

	chosen{
		stdout-path = "serial0:115200n8";
		#address-cells = <1>;
		#size-cells = <1>;
		ranges;

		framebuffer{
			compatible = "simple-framebuffer";
			clocks = <&rcc LTDC_PX>;
			status = "disabled";
		};
	};

    /*
     * Dummy regulators because no PMIC
     */
	vin: vin {
		compatible = "regulator-fixed";
		regulator-name = "vin";
		regulator-min-microvolt = <5000000>;
		regulator-max-microvolt = <5000000>;
		regulator-always-on;
	};

	v3v3_ao: v3v3_ao {
		compatible = "regulator-fixed";
		regulator-name = "v3v3_ao";
		regulator-min-microvolt = <3300000>;
		regulator-max-microvolt = <3300000>;
		regulator-always-on;
	};

    vddcpu: vddcpu {
        compatible = "regulator-fixed";
        regulator-name = "vddcpu";
        regulator-min-microvolt = <1250000>;
        regulator-max-microvolt = <1350000>;
        regulator-always-on;
    };

    vdd_ddr: vdd_ddr {
        compatible = "regulator-fixed";
        regulator-name = "vdd_ddr";
        regulator-min-microvolt = <1350000>;
        regulator-max-microvolt = <1350000>;
        regulator-always-on;
    };

    vdd: vdd {
        compatible = "regulator-fixed";
        regulator-name = "vdd";
        regulator-min-microvolt = <3300000>;
        regulator-max-microvolt = <3300000>;
        regulator-always-on;
    };

    vddcore: vddcore {
        compatible = "regulator-fixed";
        regulator-name = "vddcore";
        regulator-min-microvolt = <1250000>;
        regulator-max-microvolt = <1250000>;
        regulator-always-on;
    };

    vdd_adc: vdd_adc {
        compatible = "regulator-fixed";
        regulator-name = "vdd_adc";
        regulator-min-microvolt = <3300000>;
        regulator-max-microvolt = <3300000>;
        regulator-always-on;
    };

    vdd_usb: vdd_usb {
        compatible = "regulator-fixed";
        regulator-name = "vdd_usb";
        regulator-min-microvolt = <3300000>;
        regulator-max-microvolt = <3300000>;
        regulator-always-on;
    };

    vdd_sd: vdd_sd {
        compatible = "regulator-fixed";
        regulator-name = "vdd_sd";
        regulator-min-microvolt = <3300000>;
        regulator-max-microvolt = <3300000>;
        regulator-always-on;
    };

    v3v3_sw: v3v3_sw {
        compatible = "regulator-fixed";
        regulator-name = "v3v3_sw";
        regulator-min-microvolt = <3300000>;
        regulator-max-microvolt = <3300000>;
        regulator-always-on;
    };

    v1v8_periph: v1v8_periph {
        compatible = "regulator-fixed";
        regulator-name = "v1v8_periph";
        regulator-min-microvolt = <1800000>;
        regulator-max-microvolt = <1800000>;
        regulator-always-on;
    };
	/* USER CODE END root */

	clocks{

		clk_mco1:clk-mco1{
			#clock-cells = <0>;
			compatible = "fixed-clock";
			clock-frequency = <24000000>;
		};
	};

	led{
		compatible = "gpio-leds";

		/*
		 * The Wifi_UP pin must be held HIGH for the chip to turn on,
		 * even when power saving is disableld.
		 */
		wifi_up{
			label = "wifi_up";
			gpios = <&gpioe 10 GPIO_ACTIVE_HIGH>;
			default-state = "on";
		};
	};
/*
	sound {
		compatible = "audio-graph-card";
		label = "STM32MP13-Test";
		routing = "Playback", "DAC";
		dais = <&i2s1_port>;
		status = "okay";
	};
*/

	sound {
		compatible = "simple-audio-card";
		simple-audio-card,name = "Sound Card";
		simple-audio-card,format = "i2s";
		simple-audio-card,mclk-fs = <256>;
		status = "okay";
		simple-audio-card,routing = 
			"Playback", "DAC";
		simple-audio-card,widgets =
			"Headphone", "Headphone Jack";

		simple-audio-card,cpu {
			sound-dai = <&i2s1>;
		};

		simple-audio-card,codec {
			sound-dai = <&pcm3060>;
			clocks = <&i2s1>;
		};
	};

}; /*root*/

&pinctrl {
	ltdc_pins_mx: ltdc_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('A', 15, AF11)>, /* LTDC_G7 */
					 <STM32_PINMUX('B', 6, AF7)>, /* LTDC_B6 */
					 <STM32_PINMUX('B', 12, AF13)>, /* LTDC_R3 */
					 <STM32_PINMUX('C', 6, AF14)>, /* LTDC_HSYNC */
					 <STM32_PINMUX('C', 7, AF14)>, /* LTDC_G6 */
					 <STM32_PINMUX('D', 5, AF14)>, /* LTDC_G4 */
					 <STM32_PINMUX('D', 9, AF13)>, /* LTDC_CLK */
					 <STM32_PINMUX('D', 10, AF14)>, /* LTDC_B2 */
					 <STM32_PINMUX('D', 14, AF14)>, /* LTDC_R4 */
					 <STM32_PINMUX('E', 0, AF14)>, /* LTDC_B5 */
					 <STM32_PINMUX('E', 7, AF14)>, /* LTDC_R5 */
					 <STM32_PINMUX('E', 9, AF14)>, /* LTDC_R7 */
					 <STM32_PINMUX('E', 13, AF14)>, /* LTDC_R6 */
					 <STM32_PINMUX('F', 1, AF13)>, /* LTDC_B7 */
					 <STM32_PINMUX('F', 2, AF14)>, /* LTDC_B3 */
					 <STM32_PINMUX('F', 3, AF14)>, /* LTDC_G3 */
					 <STM32_PINMUX('G', 0, AF14)>, /* LTDC_G5 */
					 <STM32_PINMUX('G', 4, AF11)>, /* LTDC_VSYNC */
					 <STM32_PINMUX('G', 7, AF14)>, /* LTDC_R2 */
					 <STM32_PINMUX('H', 9, AF11)>, /* LTDC_DE */
					 <STM32_PINMUX('H', 13, AF14)>, /* LTDC_G2 */
					 <STM32_PINMUX('H', 14, AF11)>; /* LTDC_B4 */
			bias-disable;
			drive-push-pull;
			slew-rate = <0>;
		};
	};

	ltdc_sleep_pins_mx: ltdc_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('A', 15, ANALOG)>, /* LTDC_G7 */
					 <STM32_PINMUX('B', 6, ANALOG)>, /* LTDC_B6 */
					 <STM32_PINMUX('B', 12, ANALOG)>, /* LTDC_R3 */
					 <STM32_PINMUX('C', 6, ANALOG)>, /* LTDC_HSYNC */
					 <STM32_PINMUX('C', 7, ANALOG)>, /* LTDC_G6 */
					 <STM32_PINMUX('D', 5, ANALOG)>, /* LTDC_G4 */
					 <STM32_PINMUX('D', 9, ANALOG)>, /* LTDC_CLK */
					 <STM32_PINMUX('D', 10, ANALOG)>, /* LTDC_B2 */
					 <STM32_PINMUX('D', 14, ANALOG)>, /* LTDC_R4 */
					 <STM32_PINMUX('E', 0, ANALOG)>, /* LTDC_B5 */
					 <STM32_PINMUX('E', 7, ANALOG)>, /* LTDC_R5 */
					 <STM32_PINMUX('E', 9, ANALOG)>, /* LTDC_R7 */
					 <STM32_PINMUX('E', 13, ANALOG)>, /* LTDC_R6 */
					 <STM32_PINMUX('F', 1, ANALOG)>, /* LTDC_B7 */
					 <STM32_PINMUX('F', 2, ANALOG)>, /* LTDC_B3 */
					 <STM32_PINMUX('F', 3, ANALOG)>, /* LTDC_G3 */
					 <STM32_PINMUX('G', 0, ANALOG)>, /* LTDC_G5 */
					 <STM32_PINMUX('G', 4, ANALOG)>, /* LTDC_VSYNC */
					 <STM32_PINMUX('G', 7, ANALOG)>, /* LTDC_R2 */
					 <STM32_PINMUX('H', 9, ANALOG)>, /* LTDC_DE */
					 <STM32_PINMUX('H', 13, ANALOG)>, /* LTDC_G2 */
					 <STM32_PINMUX('H', 14, ANALOG)>; /* LTDC_B4 */
		};
	};

	rtc_pins_mx: rtc_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('I', 1, ANALOG)>; /* RTC_LSCO_OUT2 */
		};
	};

	rtc_sleep_pins_mx: rtc_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('I', 1, ANALOG)>; /* RTC_LSCO_OUT2 */
		};
	};

	i2c3_pins_mx: i2c3-0 {
		pins {
			pinmux = <STM32_PINMUX('H', 3, AF4)>, /* I2C3_SCL */
				 <STM32_PINMUX('H', 7, AF5)>; /* I2C3_SDA */
			bias-disable;
			drive-open-drain;
			slew-rate = <0>;
		};
	};

	i2c3_sleep_pins_mx: i2c3-sleep-0 {
		pins {
			pinmux = <STM32_PINMUX('H', 3, ANALOG)>, /* I2C3_SCL */
				 <STM32_PINMUX('H', 7, ANALOG)>; /* I2C3_SDA */
		};
	};

	spi5_pins_mx: spi5-1 {
		pins1 {
			pinmux = <STM32_PINMUX('G', 10, AF5)>, /* SPI4_SCK */
				<STM32_PINMUX('H', 12, AF5)>; /* SPI4_MOSI */
			bias-disable;
			drive-push-pull;
			slew-rate = <1>;
		};

		pins2 {
			pinmux = <STM32_PINMUX('G', 8, AF5)>; /* SPI4_MISO */
			bias-disable;
		};
	};

	spi5_sleep_pins_mx: spi5-sleep-1 {
		pins {
			pinmux = <STM32_PINMUX('G', 10, ANALOG)>, /* SPI4_SCK */
				<STM32_PINMUX('G', 8, ANALOG)>, /* SPI4_MISO */
				<STM32_PINMUX('H', 12, ANALOG)>; /* SPI4_MOSI */
		};
	};

	/*
	 * Audio
	 */
	i2s1_pins_mx: i2s1-0 {
		pins {
			pinmux = <STM32_PINMUX('C', 0, AF5)>, // I2S1_MCLK
				//<STM32_PINMUX('A', 6, AF5)>, // I2S1_SDI
				<STM32_PINMUX('A', 3, AF5)>, // I2S1_SDO
				<STM32_PINMUX('C', 3, AF6)>, // I2S1_CK
				<STM32_PINMUX('A', 4, AF5)>; //I2S1_WS
			bias-disable;
			drive-push-pull;
			slew-rate = <1>;
		};
	};
	
	i2s1_sleep_pins_mx: i2s1-sleep-0 {
		pins {
			pinmux = <STM32_PINMUX('C', 0, ANALOG)>, // I2S1_MCLK
				//<STM32_PINMUX('A', 6, ANALOG)>, // I2S1_SDI
				<STM32_PINMUX('A', 3, ANALOG)>, // I2S1_SDO
				<STM32_PINMUX('C', 3, ANALOG)>, // I2S1_CK
				<STM32_PINMUX('A', 4, ANALOG)>; //I2S1_WS
		};
	};
};

&bsec{
	status = "okay";

	/* USER CODE BEGIN bsec */
	/* USER CODE END bsec */
};

&crc1{
	status = "okay";

	/* USER CODE BEGIN crc1 */
	/* USER CODE END crc1 */
};

&cryp{
	status = "okay";

	/* USER CODE BEGIN cryp */
	/* USER CODE END cryp */
};

&dma1{
	status = "okay";

	/* USER CODE BEGIN dma1 */
	/* USER CODE END dma1 */
};

&dma2{
	status = "okay";

	/* USER CODE BEGIN dma2 */
	/* USER CODE END dma2 */
};

&dmamux1{
	status = "okay";

	dma-masters = <&dma1 &dma2>;
	dma-channels = <16>;

	/* USER CODE BEGIN dmamux1 */
	/* USER CODE END dmamux1 */
};

&dts{
	status = "okay";

	/* USER CODE BEGIN dts */
	/* USER CODE END dts */
};

&i2c3{
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&i2c3_pins_mx>;
	pinctrl-1 = <&i2c3_sleep_pins_mx>;
	status = "okay";
	i2c-scl-rising-time-ns = <96>;
	i2c-scl-falling-time-ns = <3>;
	clock-frequency = <400000>;
	/delete-property/ dmas;
	/delete-property/ dma-names;

	/*
	 * Audio
	*/
	pcm3060: pcm3060@46 {
		compatible = "ti,pcm3060";
		reg = <0x46>;
		clocks = <&i2s1>;     // The codec is a consumer of I2S1 master clock
		clock-names = "MCLK"; // Feed MCLK codec clock with I2S1 master clock provider
		ti,out-single-ended = "true";
		#sound-dai-cells = <0>;
		status = "okay";

		ports {
			#address-cells = <1>;
			#size-cells = <0>;

			port@0 {
				reg = <0>;
				pcm3060_endpoint: endpoint {
					remote-endpoint = <&i2s1_endpoint>;
				};
			};
		};
	};
};

&i2s1 {
	clocks = <&rcc SPI1>, <&rcc SPI1_K>, <&scmi_clk CK_SCMI_PLL3_Q>, <&scmi_clk CK_SCMI_PLL3_R>;
	clock-names = "pclk", "i2sclk", "x8k", "x11k";
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&i2s1_pins_mx>;
	pinctrl-1 = <&i2s1_sleep_pins_mx>;
	#clock-cells = <0>; // Set I2S1 as master clock provider
	#sound-dai-cells = <0>;
	status = "okay";

	i2s1_port: port {
		#address-cells = <1>;
        #size-cells = <0>;
		
		i2s1_endpoint: endpoint {
			remote-endpoint = <&pcm3060_endpoint>;
			system-clock-direction-out;
			frame-master;
			bitclock-master;
			format = "i2s";
			mclk-fs = <256>;
		};
	};
};

&ltdc{
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&ltdc_pins_mx>;
	pinctrl-1 = <&ltdc_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN ltdc */

	port{

	};
	/* USER CODE END ltdc */
};

&mdma{
	status = "okay";

	/* USER CODE BEGIN mdma */
	/* USER CODE END mdma */
};

/*
&rcc {
	status = "okay";
};

&rtc{
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&rtc_pins_mx>;
	pinctrl-1 = <&rtc_sleep_pins_mx>;
	status = "okay";
	st,lsco = <RTC_OUT2_RMP>;
};
*/


&sdmmc1{
	pinctrl-names = "default", "opendrain", "sleep";
	pinctrl-0 = <&sdmmc1_b4_pins_a &sdmmc1_clk_pins_a>;
	pinctrl-1 = <&sdmmc1_b4_od_pins_a &sdmmc1_clk_pins_a>;
	pinctrl-2 = <&sdmmc1_b4_sleep_pins_a>;
	status = "okay";

	cd-gpios = <&gpiod 12 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>;
	disable-wp;
	st,neg-edge;
	bus-width = <4>;
	vmmc-supply = <&v3v3_ao>;
};

/*
 * Console
 */
&uart4{
	pinctrl-names = "default", "idle", "sleep";
	pinctrl-0 = <&uart4_pins_a>;
	pinctrl-1 = <&uart4_idle_pins_a>;
	pinctrl-2 = <&uart4_sleep_pins_a>;
	status = "okay";

	/* USER CODE BEGIN uart4 */
	/delete-property/ dmas;
	/delete-property/ dma-names;
	/* USER CODE END uart4 */
};

/*
 * WiFi
 */
&spi5 {
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&spi5_pins_mx>;
	pinctrl-1 = <&spi5_sleep_pins_mx>;
	cs-gpios= <&gpioe 8 GPIO_ACTIVE_LOW>; //PE8 = CS for WiFi
	status = "okay";

	wifi@0 {
		compatible = "silabs,wf200";
		interrupts-extended = <&gpioi 0 IRQ_TYPE_EDGE_RISING>;
		//wakeup-gpios = <&gpioe 10 (GPIO_ACTIVE_LOW)>;
		reset-gpios = <&gpioc 13 GPIO_ACTIVE_LOW>;
		reg = <0>; //CS index 0 (see above)
		spi-max-frequency = <42000000>;
	};
};

/*
 * USB Configuration
 */
&usbh_ehci {
	status = "okay";
	phys = <&usbphyc_port0>, <&usbphyc_port1 1>;
	phy-names = "usb", "usb";
};

&usbh_ohci {
	phys = <&usbphyc_port0>, <&usbphyc_port1 1>;
	phy-names = "usb", "usb";
	status = "okay";
};

&usbphyc {
	status = "okay";
};

&usbphyc_port0 {
	status="okay";
	phy-supply = <&vdd_usb>;
};

&usbphyc_port1 {
	status="okay";
	phy-supply = <&vdd_usb>;
};

/* USER CODE BEGIN addons */

&arm_wdt{
	timeout-sec = <32>;
	status = "okay";
};

